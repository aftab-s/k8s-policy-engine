apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-default-namespace
  annotations:
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/title: Disallow Default Namespace
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/category: Multi-Tenancy
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      Kubernetes Namespaces are an optional feature that provide a way to segment and
      isolate cluster resources across multiple applications and users. As a best
      practice, workloads should be isolated with Namespaces. Namespaces should be required
      and the default (empty) Namespace should not be used. This policy validates that Pods
      specify a Namespace name other than `default`. Rule auto-generation is disabled here
      due to Pod controllers need to specify the `namespace` field under the top-level `metadata`
      object and not at the Pod template level.      
spec:
  validationFailureAction: Enforce # if it is set to "Audit" it'll just log the process and not actually prevent resources from being created.
  background: true
  rules:
  - name: validate-namespace
    match:
      any:
      - resources:
          kinds:
          - Pod
    validate:
      message: "Using 'default' namespace is not allowed."
      pattern:
        metadata:
          namespace: "!default"
  - name: validate-podcontroller-namespace
    match:
      any:
      - resources:
          kinds:
          - DaemonSet
          - Deployment
          - Job
          - StatefulSet
    validate:
      message: "Using 'default' namespace is not allowed for pod controllers."
      pattern:
        metadata:
          namespace: "!default"

# def apply_kyverno_policy(namespace, policy_name):
#     try:
#         # Create Kubernetes API client for Custom Resources (CR)
#         print("Applying Kyverno policy function called!")
#         custom_api = client.CustomObjectsApi()

#         # Apply Kyverno policy to the namespace
#         group = 'kyverno.io'
#         version = 'v1'
#         plural = 'policies'

#         # Print debugging information
#         print(f"Applying Kyverno policy: {policy_name}")

#         # Use the correct function parameters here
#         # Before the subprocess.run command in apply_kyverno_policy function
#         print(f"Applying Kyverno policy file: {POLICIES_DIRECTORY}/{policy_name}.yaml")

#         command = f"kubectl apply -f {POLICIES_DIRECTORY}/{policy_name}.yaml"
#         subprocess.run(command, shell=True, check=True)

#         # Fetch Kyverno policy details after applying
#         policy = custom_api.get_namespaced_custom_object(group, version, namespace, plural, policy_name)
#         print(f"Fetched Kyverno policy details: {policy}")

#         return {"success": True, "message": "Policy applied successfully"}

#     except subprocess.CalledProcessError as e:
#         # Handle exceptions (e.g., Kyverno CRD not found, API server unreachable)
#         print(f"Error applying Kyverno policy: {str(e)}")
#         return {"success": False, "message": f"Error applying Kyverno policy: {str(e)}"}

# Apply the selected Kyverno policy to the namespace
    # apply_kyverno_policy(selected_namespace, selected_policy)

    # Apply the selected Kyverno policy to the namespace
    # result = apply_kyverno_policy(selected_namespace, selected_policy)

    # return render_template(
    #     'apply_policy_result.html',
    #     selected_namespace=selected_namespace,
    #     selected_policy=selected_policy,
    #     apply_result=result,
    #     kyverno_policies=kyverno_policies
    # )